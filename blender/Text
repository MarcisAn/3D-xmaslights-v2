import bpy
import mathutils



def fetchIfObject (passedName= ""):
    try:
        result = bpy.data.objects[passedName]
    except:
        result = None
    return result

    
def pointInsideMesh(point,ob):
    axes = [ mathutils.Vector((1,0,0)) , mathutils.Vector((0,1,0)), mathutils.Vector((0,0,1))  ]
    outside = False
    for axis in axes:
        orig = point
        count = 0
        while True:
            result,location,normal,index = ob.ray_cast(orig,orig+axis*10000.0)
            if index == -1: break
            count += 1
            orig = location + axis*0.00001
        if count%2 == 0:
            outside = True
            break
    return not outside


class GetLightDataOperator(bpy.types.Operator):
    bl_idname = "wm.light_data"
    bl_label = "Minimal Operator"

    def execute(self, context):
        print("Hello World")
        print(bpy.data.collections[0].objects)
        for object in bpy.data.collections[0].objects:
            print(object)
        return {'FINISHED'}


# Only needed if you want to add into a dynamic menu.
def menu_func(self, context):
    self.layout.operator(GetLightDataOperator.bl_idname, text="Calculate light data")


# Register and add to the view menu (required to also use F3 search "Hello World Operator" for quick access).
#bpy.utils.register_class(GetLightDataOperator)
#bpy.types.VIEW3D_MT_view.append(menu_func)

# Test call to the newly defined operator.
bpy.ops.wm.light_data()


myPoint = fetchIfObject("Empty")
myMesh = fetchIfObject("Cube")
if myPoint != None:
    result = pointInsideMesh(myPoint.location,myMesh)
    print (result)
else:
    print ("myPoint does not exist.")
    

